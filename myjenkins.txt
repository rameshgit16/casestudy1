pipeline {
    agent any
environment {
IMAGE_NAME = 'ramesh316/sample'
        TAG = 'latest'
        EKS_CLUSTER = 'my-eks-cluster'
        DEV_NAMESPACE = 'dev'
        QA_NAMESPACE = 'qa'
        PROD_NAMESPACE = 'production'
}
  stages{
        stage("Cleanup Workspace"){
                steps {
                cleanWs()
                }
            }
stage("checkout from SCM") {
      steps {
        git branch: 'main' , credentialsId: 'github' , url: 'https://github.com/rameshgit16/Petclinic.git'
        }
   }
stage ("Build application") {
        steps {
             sh "mvn clean package"
             }
        }
stage ("Test application") {
        steps {
           sh "mvn test"
              }
         }

      stage ('SonarQube Analysis') {
        steps {
      withSonarQubeEnv("sonarqube") {
         sh "mvn clean verify sonar:sonar -Dsonar.projectKey=sonar-petclinic -Dsonar.projectName='sonar-petclinic'"
     }
  }
}
stage('Build Docker Image') {
            steps {
                script {
                    docker.build("$IMAGE_NAME:$TAG")
                }
            }
        }
 stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'dockerhub-cd') {
                        docker.image("$IMAGE_NAME:$TAG").push()
                    
                }            
            }
        }
    }  
  stage('Security Scan') {
            steps {
               script {
                sh "trivy image ${IMAGE_NAME}:${TAG}"
           }
        }
   }

 stage('Deploy to EKS') {
            parallel {
                stage('Deploy to Dev') {
                    steps {
                        sh "kubectl config use-context $EKS_CLUSTER"
                        sh "kubectl apply -f dev-deployment.yaml"
                    }
                }
                stage('Deploy to QA') {
                    steps {
                        sh "kubectl config use-context $EKS_CLUSTER"
                        sh "kubectl apply -f qa-deployment.yaml"
                    }
                }
                stage('Deploy to Production') {
                    when {
                        branch 'main'
                    }
                    steps {
                        input 'Proceed with deploying to production?'
                        sh "kubectl config use-context $EKS_CLUSTER"
                        sh "kubectl apply -f prod-deployment.yaml"
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                def coverage = sh(script: 'mvn jacoco:report | grep "Total instruction coverage"', returnStdout: true).trim()
                if (coverage.contains('80%')) {
                    emailext body: "Code coverage reached 80%: ${coverage}",
                        subject: "Code Coverage Alert",
                        to: "mo.ramesh16@gmail.com.com"
                }
            }
        }
    }
}
